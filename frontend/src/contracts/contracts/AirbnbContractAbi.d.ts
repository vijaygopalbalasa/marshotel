/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.73.0
  Forc version: 0.49.2
  Fuel-Core version: 0.22.0
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export enum BookingErrorInput { PropertyBooked = 'PropertyBooked', BookingNotFound = 'BookingNotFound', PropertyNotAvailable = 'PropertyNotAvailable', PropertyNotFound = 'PropertyNotFound' };
export enum BookingErrorOutput { PropertyBooked = 'PropertyBooked', BookingNotFound = 'BookingNotFound', PropertyNotAvailable = 'PropertyNotAvailable', PropertyNotFound = 'PropertyNotFound' };
export enum BookingStateInput { Available = 'Available', Booked = 'Booked', Cancelled = 'Cancelled' };
export enum BookingStateOutput { Available = 'Available', Booked = 'Booked', Cancelled = 'Cancelled' };
export enum CreationErrorInput { BookingDateMustBeInFuture = 'BookingDateMustBeInFuture' };
export enum CreationErrorOutput { BookingDateMustBeInFuture = 'BookingDateMustBeInFuture' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum PropertyStateInput { Listed = 'Listed', Unlisted = 'Unlisted' };
export enum PropertyStateOutput { Listed = 'Listed', Unlisted = 'Unlisted' };
export enum UserErrorInput { InvalidID = 'InvalidID', UnauthorizedUser = 'UnauthorizedUser', PropertyNotAvailable = 'PropertyNotAvailable' };
export enum UserErrorOutput { InvalidID = 'InvalidID', UnauthorizedUser = 'UnauthorizedUser', PropertyNotAvailable = 'PropertyNotAvailable' };

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type BookingInfoInput = { bookedBy: IdentityInput, bookingFrom: BigNumberish, bookingTo: BigNumberish, status: BookingStateInput, property_id: BigNumberish };
export type BookingInfoOutput = { bookedBy: IdentityOutput, bookingFrom: BN, bookingTo: BN, status: BookingStateOutput, property_id: BN };
export type BookingSuccessfulInput = { booking_id: BigNumberish, bookedBy: IdentityInput, bookingFrom: BigNumberish, bookingTo: BigNumberish };
export type BookingSuccessfulOutput = { booking_id: BN, bookedBy: IdentityOutput, bookingFrom: BN, bookingTo: BN };
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type PropertyImageInput = { image1: string, image2: string };
export type PropertyImageOutput = PropertyImageInput;
export type PropertyInfoInput = { owner: IdentityInput, pincode: BigNumberish, listed: PropertyStateInput, available: BookingStateInput };
export type PropertyInfoOutput = { owner: IdentityOutput, pincode: BN, listed: PropertyStateOutput, available: BookingStateOutput };
export type PropertyListedInput = { owner: IdentityInput, property_info: PropertyInfoInput, property_id: BigNumberish };
export type PropertyListedOutput = { owner: IdentityOutput, property_info: PropertyInfoOutput, property_id: BN };
export type PropertyUnlistedInput = { property_id: BigNumberish };
export type PropertyUnlistedOutput = { property_id: BN };

interface AirbnbContractAbiInterface extends Interface {
  functions: {
    book: FunctionFragment;
    list_property: FunctionFragment;
    unlist_property: FunctionFragment;
    booking_info: FunctionFragment;
    get_property_images: FunctionFragment;
    property_info: FunctionFragment;
    total_booking: FunctionFragment;
    total_property_listed: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'book', values: [BigNumberish, BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'list_property', values: [BigNumberish, string, string]): Uint8Array;
  encodeFunctionData(functionFragment: 'unlist_property', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'booking_info', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_property_images', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'property_info', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'total_booking', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'total_property_listed', values: []): Uint8Array;

  decodeFunctionData(functionFragment: 'book', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'list_property', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'unlist_property', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'booking_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_property_images', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'property_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_booking', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_property_listed', data: BytesLike): DecodedValue;
}

export class AirbnbContractAbi extends Contract {
  interface: AirbnbContractAbiInterface;
  functions: {
    book: InvokeFunction<[property_id: BigNumberish, bookingFrom: BigNumberish, bookingTo: BigNumberish], void>;
    list_property: InvokeFunction<[pincode: BigNumberish, image1: string, image2: string], void>;
    unlist_property: InvokeFunction<[property_id: BigNumberish], void>;
    booking_info: InvokeFunction<[booking_id: BigNumberish], Option<BookingInfoOutput>>;
    get_property_images: InvokeFunction<[property_id: BigNumberish], Option<PropertyImageOutput>>;
    property_info: InvokeFunction<[property_id: BigNumberish], Option<PropertyInfoOutput>>;
    total_booking: InvokeFunction<[], BN>;
    total_property_listed: InvokeFunction<[], BN>;
  };
}
